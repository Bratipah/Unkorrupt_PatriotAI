type Backend = service {
  addAcls : (principal) -> () oneway;
  addQuestion : (nat, Question) -> (Result_1);
  changeApiKey : (text) -> () oneway;
  changeOwner : (text) -> () oneway;
  createCourse : (text, text) -> (Result);
  createReport : (text, text, text, text, blob) -> (Result_2);
  createResource : (nat, text, text, text, ResourceType__1) -> (Result_1);
  enrollCourse : (nat) -> (Result_1);
  generateCourse : (text, text) -> (text);
  generateQuestionsForCourse : (nat) -> (Result_3);
  generateRandomNumber : (nat) -> (nat);
  generateRandomNumberPrng : (nat) -> (nat) query;
  getAcls : () -> (vec principal) query;
  getCourseDetails : (nat) -> (Result_10) query;
  getCourseQuestions : (nat) -> (Result_7) query;
  getOwner : () -> (principal) query;
  getProfile : () -> (Result_9);
  getRandomCourseQuestions : (nat, nat) -> (Result_7);
  getRunMessage : (text) -> (Result_8);
  getRunMessage2 : (text, nat) -> (Result_8);
  getRunQuestions : (text) -> (Result_7);
  getRunStatus : (text) -> (Result_6) query;
  getRunsInQueue : () -> (vec SharedThreadRun) query;
  getUserEnrolledCourse : (nat) -> (Result_5);
  getUserEnrolledCourses : () -> (Result_4);
  get_icrc1_token_canister_id : () -> (text) query;
  listCourses : () -> (vec SharedCourse) query;
  listCoursesByStatus : (CourseStatus) -> (vec SharedCourse) query;
  listReports : (text) -> (vec Report) query;
  registerUser : (text, text, text) -> (Result_1);
  removeAcls : (principal) -> (Result_2);
  removeQuestion : (nat, nat) -> (Result_2);
  removeResource : (nat, nat) -> (Result_2);
  sendThreadMessage : (text, text) -> (Result_3);
  setAssistantId : (text) -> () oneway;
  setRunProcess : (text, bool) -> () oneway;
  set_icrc1_token_canister : (text) -> (Result_2);
  submitQuestionsAttempt : (nat, vec SubmittedAnswer) -> (Result_1);
  transform : (TransformArgs) -> (CanisterHttpResponsePayload) query;
  updateCourse : (nat, text, text, CourseStatus) -> (Result_1);
  upvoteReport : (nat) -> (Result);
};
type CanisterHttpResponsePayload = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type CourseStatus = variant { InFix; Approved; InReview; Rejected };
type CourseStatus__1 = variant { InFix; Approved; InReview; Rejected };
type EnrolledCourseProgress = record {
  id : nat;
  title : text;
  completed : bool;
};
type HttpHeader = record { value : text; name : text };
type HttpResponsePayload = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Message = record { content : text; role : MessgeType; runId : opt text };
type Message__1 = record {
  content : text;
  role : MessgeType;
  runId : opt text;
};
type MessgeType = variant { System; User };
type Question = record {
  id : nat;
  correctOption : nat;
  description : text;
  options : vec QuestionOption;
};
type QuestionOption = record { option : nat; description : text };
type Report = record {
  id : nat;
  upvotes : nat;
  country : text;
  owner : principal;
  state : text;
  details : text;
  category : text;
  image : blob;
};
type Resource = record {
  id : nat;
  url : text;
  title : text;
  description : text;
  rType : ResourceType;
};
type ResourceType = variant { Book; Article; Report; Slides; Video };
type ResourceType__1 = variant { Book; Article; Report; Slides; Video };
type Result = variant { ok : nat; err : text };
type Result_1 = variant { ok : text; err : text };
type Result_10 = variant { ok : SharedCourseWithResources; err : text };
type Result_2 = variant { ok; err : text };
type Result_3 = variant { ok : SendMessageStatus; err : SendMessageStatus };
type Result_4 = variant { ok : vec EnrolledCourseProgress; err : text };
type Result_5 = variant { ok : SharedEnrolledCourse; err : text };
type Result_6 = variant { ok : RunStatus__1; err : text };
type Result_7 = variant { ok : vec Question; err : text };
type Result_8 = variant { ok : Message__1; err : text };
type Result_9 = variant { ok : SharedUser; err : text };
type RunStatus = variant { Failed; Cancelled; InProgress; Completed; Expired };
type RunStatus__1 = variant {
  Failed;
  Cancelled;
  InProgress;
  Completed;
  Expired;
};
type SendMessageStatus = variant {
  Failed : text;
  ThreadLock : record { runId : text };
  Completed : record { runId : text };
};
type SharedCourse = record {
  id : nat;
  status : CourseStatus__1;
  title : text;
  reportCount : nat;
  summary : text;
  enrolledCount : nat;
};
type SharedCourseWithResources = record {
  id : nat;
  status : CourseStatus__1;
  title : text;
  reportCount : nat;
  resources : vec Resource;
  summary : text;
  enrolledCount : nat;
};
type SharedEnrolledCourse = record {
  id : nat;
  messages : vec Message;
  completed : bool;
  threadId : text;
};
type SharedThreadRun = record {
  job : ThreadRunJob;
  status : RunStatus;
  lastExecuted : opt Time;
  timestamp : Time;
  threadId : text;
  processing : bool;
  runId : text;
};
type SharedUser = record {
  id : nat;
  country : text;
  username : text;
  state : text;
};
type SubmittedAnswer = record { option : nat; questionId : nat };
type ThreadRunJob = variant { Question; Message };
type Time = int;
type TransformArgs = record { context : blob; response : HttpResponsePayload };
service : () -> Backend