type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type Time = int;
type ThreadRunJob = 
 variant {
   Message;
   Question;
 };
type SubmittedAnswer = 
 record {
   option: nat;
   questionId: nat;
 };
type SharedUser = 
 record {
   country: text;
   id: nat;
   state: text;
   username: text;
 };
type SharedThreadRun = 
 record {
   job: ThreadRunJob;
   lastExecuted: opt Time;
   processing: bool;
   runId: text;
   status: RunStatus;
   threadId: text;
   timestamp: Time;
 };
type SharedEnrolledCourse = 
 record {
   completed: bool;
   id: nat;
   messages: vec Message;
   threadId: text;
 };
type SharedCourseWithResources = 
 record {
   enrolledCount: nat;
   id: nat;
   reportCount: nat;
   resources: vec Resource;
   status: CourseStatus__1;
   summary: text;
   title: text;
 };
type SharedCourse = 
 record {
   enrolledCount: nat;
   id: nat;
   reportCount: nat;
   status: CourseStatus__1;
   summary: text;
   title: text;
 };
type SendMessageStatus = 
 variant {
   Completed: record {runId: text;};
   Failed: text;
   ThreadLock: record {runId: text;};
 };
type RunStatus__1 = 
 variant {
   Cancelled;
   Completed;
   Expired;
   Failed;
   InProgress;
 };
type RunStatus = 
 variant {
   Cancelled;
   Completed;
   Expired;
   Failed;
   InProgress;
 };
type Result_9 = 
 variant {
   err: text;
   ok: SharedUser;
 };
type Result_8 = 
 variant {
   err: text;
   ok: Message__1;
 };
type Result_7 = 
 variant {
   err: text;
   ok: vec Question;
 };
type Result_6 = 
 variant {
   err: text;
   ok: RunStatus__1;
 };
type Result_5 = 
 variant {
   err: text;
   ok: SharedEnrolledCourse;
 };
type Result_4 = 
 variant {
   err: text;
   ok: vec EnrolledCourseProgress;
 };
type Result_3 = 
 variant {
   err: SendMessageStatus;
   ok: SendMessageStatus;
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_10 = 
 variant {
   err: text;
   ok: SharedCourseWithResources;
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok: nat;
 };
type ResourceType__1 = 
 variant {
   Article;
   Book;
   Report;
   Slides;
   Video;
 };
type ResourceType = 
 variant {
   Article;
   Book;
   Report;
   Slides;
   Video;
 };
type Resource = 
 record {
   description: text;
   id: nat;
   rType: ResourceType;
   title: text;
   url: text;
 };
type Report = 
 record {
   category: text;
   country: text;
   details: text;
   id: nat;
   image: blob;
   owner: principal;
   state: text;
   upvotes: nat;
 };
type QuestionOption = 
 record {
   description: text;
   option: nat;
 };
type Question = 
 record {
   correctOption: nat;
   description: text;
   id: nat;
   options: vec QuestionOption;
 };
type MessgeType = 
 variant {
   System;
   User;
 };
type Message__1 = 
 record {
   content: text;
   role: MessgeType;
   runId: opt text;
 };
type Message = 
 record {
   content: text;
   role: MessgeType;
   runId: opt text;
 };
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type EnrolledCourseProgress = 
 record {
   completed: bool;
   id: nat;
   title: text;
 };
type CourseStatus__1 = 
 variant {
   Approved;
   InFix;
   InReview;
   Rejected;
 };
type CourseStatus = 
 variant {
   Approved;
   InFix;
   InReview;
   Rejected;
 };
type CanisterHttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type Backend = 
 service {
   addAcls: (principal) -> () oneway;
   addQuestion: (nat, Question) -> (Result_1);
   changeApiKey: (text) -> () oneway;
   changeOwner: (text) -> () oneway;
   createCourse: (text, text) -> (Result);
   createReport: (text, text, text, text, blob) -> (Result_2);
   createResource: (nat, text, text, text, ResourceType__1) -> (Result_1);
   enrollCourse: (nat) -> (Result_1);
   generateCourse: (text, text) -> (text);
   generateQuestionsForCourse: (nat) -> (Result_3);
   generateRandomNumber: (nat) -> (nat);
   generateRandomNumberPrng: (nat) -> (nat) query;
   getAcls: () -> (vec principal) query;
   getCourseDetails: (nat) -> (Result_10) query;
   getCourseQuestions: (nat) -> (Result_7) query;
   getOwner: () -> (principal) query;
   getProfile: () -> (Result_9);
   getRandomCourseQuestions: (nat, nat) -> (Result_7);
   getRunMessage: (text) -> (Result_8);
   getRunMessage2: (text, nat) -> (Result_8);
   getRunQuestions: (text) -> (Result_7);
   getRunStatus: (text) -> (Result_6) query;
   getRunsInQueue: () -> (vec SharedThreadRun) query;
   getUserEnrolledCourse: (nat) -> (Result_5);
   getUserEnrolledCourses: () -> (Result_4);
   get_icrc1_token_canister_id: () -> (text) query;
   listCourses: () -> (vec SharedCourse) query;
   listCoursesByStatus: (CourseStatus) -> (vec SharedCourse) query;
   listReports: (text) -> (vec Report) query;
   registerUser: (text, text, text) -> (Result_1);
   removeAcls: (principal) -> (Result_2);
   removeQuestion: (nat, nat) -> (Result_2);
   removeResource: (nat, nat) -> (Result_2);
   sendThreadMessage: (text, text) -> (Result_3);
   setAssistantId: (text) -> () oneway;
   setRunProcess: (text, bool) -> () oneway;
   set_icrc1_token_canister: (text) -> (Result_2);
   submitQuestionsAttempt: (nat, vec SubmittedAnswer) -> (Result_1);
   transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
   updateCourse: (nat, text, text, CourseStatus) -> (Result_1);
   upvoteReport: (nat) -> (Result);
 };
service : () -> Backend
